<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ground Booking DApp</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-image: url('https://static.vecteezy.com/system/resources/previews/006/413/040/non_2x/blue-gradient-pastle-soft-beautiful-abstract-background-you-can-use-this-background-for-your-content-like-as-technology-video-gaming-promotion-card-banner-sports-presentation-website-etc-vector.jpg');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }

    .header {
      background-color: rgba(255, 255, 255, 0.7);
      padding: 20px;
      font-size: 36px;
      border-radius: 8px;
      margin: 20px;
    }

    .box {
      background-image: url('https://b2binpay.com/app/uploads/2019/08/Accept-Ethereum-Payments-ETH.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      color: black;
      font-size: 20px;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .inputbox {
      margin-bottom: 20px;
    }

    input[type="text"],
    input[type="date"],
    input[type="time"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: none;
      border-radius: 5px;
      background-color: rgba(255, 255, 255, 0.7);
    }

    input[type="submit"],
    input[type="reset"] {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      background-color: #007bff;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    input[type="submit"]:hover,
    input[type="reset"]:hover {
      background-color: #0056b3;
    }

    
  </style>
</head>
<body>
    <div class="header text-center">
      Ground Booking
    </div>
    
    <div class="container-fluid">
      <div class="row justify-content-center">
        <div class="col-lg-6 box">
          <h2 class="text-center mb-4">Booking Details</h2>
          <form id="bookingForm">
            <div class="inputbox">
              <label for="mobile">Mobile:</label>
              <input type="text" id="mobileNumber" name="mobile" minlength="10" maxlength="10" autocomplete="off" pattern="[6-9]{1}[0-9]{9}" title="Numbers only" required>
            </div>
            <div class="inputbox">
              <label for="date">Date:</label>
              <input type="date" id="date" name="date" min="{{ date }}" autocomplete="off" required>
            </div>
            <div class="inputbox">
              <label for="time">Time:</label>
              <input type="time" id="time" name="time" min="06:00" max="18:00" required>
            </div>
            <div class="inputbox">
                <label for="time">Booking Fee:</label>
                <input type="text" id="value" name="time" required>
            </div>
            <div class="footer">
                <input type="submit" value="Book Ground" name="submit">
            </div>
          </form>
        </div>
      </div>
    </div>

  <!-- Container for transaction status -->
  <div id="transactionStatus"></div>

  <!-- JavaScript code -->
  <script src="https://cdn.jsdelivr.net/npm/web3@1.6.0/dist/web3.min.js"></script>
  <script>
    window.addEventListener('load', async () => {
      if (window.ethereum) {
        window.web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
      } else {
        console.error('Web3 provider not detected. Please install MetaMask or use a browser with Ethereum support.');
      }
    });

    const bookingForm = document.getElementById('bookingForm');
    const transactionStatus = document.getElementById('transactionStatus');

    bookingForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      const mobileNumber = document.getElementById('mobileNumber').value;
      const date = document.getElementById('date').value;
      const time = document.getElementById('time').value;
      const value = document.getElementById('value').value;

      try {
        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
        const contractABI = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_mobileNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_date",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_time",
				"type": "string"
			}
		],
		"name": "bookGround",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "bookings",
		"outputs": [
			{
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "mobileNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "date",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "time",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "nextBookingId",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdrawFunds",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
 // Your contract ABI goes here
        const contractAddress = '0xc38FBacc99804c034B10f10E8278c9c600DD6cdd'; // Replace with your contract address
        const web3 = window.web3;
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        
        const result = await contract.methods.bookGround(mobileNumber, date, time).send({
          from: accounts[0],
          value: web3.utils.toWei(value, 'ether'),
        });
        
        transactionStatus.innerHTML = `Transaction successful. Transaction hash: ${result.transactionHash}`;
      } catch (error) {
        console.error(error);
        transactionStatus.innerHTML = `Transaction failed: ${error.message}`;
      }
    });
  </script>
</body>
</html>
