<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Booking</title>
    <style>
        body {
          margin: 0;
          padding: 0;
          font-family: Arial, sans-serif;
          background-image: url('https://static.vecteezy.com/system/resources/previews/006/413/040/non_2x/blue-gradient-pastle-soft-beautiful-abstract-background-you-can-use-this-background-for-your-content-like-as-technology-video-gaming-promotion-card-banner-sports-presentation-website-etc-vector.jpg');
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          background-attachment: fixed; /* Ensures the background image remains fixed as the user scrolls */
        }

        html {
            height: 100%;
        }
    
        .header {
          background-color: rgba(255, 255, 255, 0.7);
          padding: 20px;
          font-size: 36px;
          border-radius: 8px;
          margin: 20px;
        }
    
        .box {
          background-image: url('https://b2binpay.com/app/uploads/2019/08/Accept-Ethereum-Payments-ETH.png');
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          color: black;
          font-size: 20px;
          padding: 40px;
          border-radius: 20px;
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        }
    
        .inputbox {
          margin-bottom: 20px;
        }
    
        input[type="text"],
        input[type="date"],
        input[type="time"] {
          width: 100%;
          padding: 10px;
          margin-bottom: 10px;
          border: none;
          border-radius: 5px;
          background-color: rgba(255, 255, 255, 0.7);
        }
    
        input[type="submit"],
        input[type="reset"] {
          padding: 10px 20px;
          border: none;
          border-radius: 5px;
          background-color: #007bff;
          color: white;
          cursor: pointer;
          transition: background-color 0.3s;
        }
    
        input[type="submit"]:hover,
        input[type="reset"]:hover {
          background-color: #0056b3;
        }
    
        
    </style>
</head>
<body>
    <div class="header text-center">
        Event Booking 
    </div>
    <div class="container-fluid">
        <div class="row justify-content-center">
          <div class="col-lg-6 box">
            <h2 class="text-center mb-4">Booking Details</h2>
            <form id="bookingForm">
              <div class="inputbox">
                <label for="eventId">Event ID:</label>
                <input type="number" id="eventId" name="eventId" required>
              </div>
              <div class="inputbox">
                <label for="mobileNumber">Mobile Number:</label>
                <input type="text" id="mobileNumber" name="mobileNumber" required>
              </div>
              <div class="footer">
                <input type="reset" value="Reset" name="submit">
                <input type="submit" value="Book Event" name="submit">
              </div>
            </form>
          </div>
        </div>
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.3.6/web3.min.js"></script>
    <script>
        // Check if Web3 has been injected by MetaMask
        if (typeof window.ethereum !== 'undefined') {
            // Use MetaMask's provider
            window.web3 = new Web3(window.ethereum);
            window.ethereum.enable(); // Request account access if needed
        } else {
            console.error('Please install MetaMask extension');
        }

        // Get contract ABI and address from compiled JSON
        const contractABI = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "eventId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "eventName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "mobileNumber",
				"type": "string"
			}
		],
		"name": "BookingMade",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_eventId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_mobileNumber",
				"type": "string"
			}
		],
		"name": "bookEvent",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "events",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "eventId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "capacity",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "bookedTickets",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]; // Insert your contract ABI here
        const contractAddress = '0xC59645119ce0Cc16e7c3aD6957Bce36DCC64babD'; // Replace with actual contract address

        // Load contract
        const eventBookingContract = new web3.eth.Contract(contractABI, contractAddress);

        document.getElementById('bookingForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const eventId = document.getElementById('eventId').value;
            const mobileNumber = document.getElementById('mobileNumber').value;

            try {
                const accounts = await web3.eth.getAccounts();

                // Send transaction to book event
                const transaction = await eventBookingContract.methods.bookEvent(eventId, mobileNumber).send({ from: accounts[0], value: web3.utils.toWei('0.1', 'ether') });

                // Transaction hash
                const transactionHash = transaction.transactionHash;

                // Inform user to confirm transaction in MetaMask
                alert(`Transaction sent! Please confirm the transaction in MetaMask.\nTransaction Hash: ${transactionHash}`);

            } catch (error) {
                console.error('Error:', error);
                alert('Error booking event');
            }
        });
    </script>
</body>
</html>
